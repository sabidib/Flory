{"version":3,"sources":["formatValue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAI,WAAW,CAAC;;AAEhB,WAAW,GAAG,UACN,KAAK,EAMI;QALT,WAAW,yDAAW,EAAE;QACxB,cAAc,yDAAW,MAAM;QAC/B,OAAO,yDAAkB,EAAE;QAC3B,UAAU;QACV,IAAI,yDAAkB,EAAE;;AAE5B,QAAI,MAAM,EACN,IAAI,CAAC;;AAET,QAAI,GAAG,4BAAa,KAAK,CAAC,CAAC;;AAE3B,QAAI,uBAAU,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AAClC,cAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;KAC7D;;AAED,YAAQ,IAAI;AACR,aAAK,OAAO;AACR,mBAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEpB,kBAAM,GAAG,2BAAY,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;AACjG,kBAAM;;AAAA,AAEV,aAAK,SAAS;AACV,kBAAM,GAAG,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;AAClC,kBAAM;;AAAA,AAEV,aAAK,QAAQ;AACT,kBAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AACvB,kBAAM;;AAAA,AAEV,aAAK,QAAQ;AACT,mBAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEpB,kBAAM,GAAG,4BAAa,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;AAClG,kBAAM;;AAAA,AAEV,aAAK,QAAQ;AACT,kBAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC/B,kBAAM;;AAAA,AAEV,aAAK,UAAU;AACX,kBAAM,GAAG,oCAAqB,KAAK,CAAC,CAAC;AACrC,kBAAM;;AAAA,AAEV,aAAK,WAAW;AACZ,kBAAM,GAAG,WAAW,CAAC;AACrB,kBAAM;;AAAA,AAEV,aAAK,MAAM;AACP,kBAAM,GAAG,MAAM,CAAC;AAChB,kBAAM;;AAAA,AAEV,aAAK,KAAK;AACN,kBAAM,GAAG,KAAK,CAAC;AACf,kBAAM;;AAAA,AAEV;AACI,kBAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AACvC,kBAAM;AAAA,KACb;;AAED,QAAI,UAAU,EAAE;AACZ,gBAAQ,IAAI;AACR,iBAAK,OAAO,CAAC;AACb,iBAAK,QAAQ;AACT,0BAAU,CAAC,GAAG,CAAC;AACX,wBAAI;AACJ,wBAAI;AACJ,yBAAK;iBACR,CAAC,CAAC;AACH,sBAAM;;AAAA,AAEV,iBAAK,SAAS,CAAC;AACf,iBAAK,QAAQ,CAAC;AACd,iBAAK,QAAQ,CAAC;AACd,iBAAK,UAAU,CAAC;AAChB,iBAAK,WAAW,CAAC;AACjB,iBAAK,MAAM,CAAC;AACZ,iBAAK,KAAK;AACN,0BAAU,CAAC,SAAS,EAAE,CAAA;AACtB,0BAAU,CAAC,GAAG,CAAC;AACX,wBAAI;AACJ,wBAAI;AACJ,yBAAK;iBACR,CAAC,CAAC;AACH,sBAAM;AAAA,SACb;KACJ;;AAED,WAAO,MAAM,CAAC;CACjB,CAAC;;kBAEa,WAAW","file":"formatValue.js","sourcesContent":["import _ from 'lodash';\nimport formatArray from './formatArray';\nimport formatObject from './formatObject';\nimport getFunctionSignature from './getFunctionSignature';\nimport getValueType from './getValueType';\n\nlet formatValue;\n\nformatValue = (\n        value,\n        blockIndent: string = '',\n        indentTemplate: string = '    ',\n        visited: Array<Object> = [],\n        valueIndex: Object,\n        path: Array<string> = []\n    ): string => {\n    let append,\n        type;\n\n    type = getValueType(value);\n\n    if (_.indexOf(visited, value) !== -1) {\n        throw new Error('Circular references are not supported.');\n    }\n\n    switch (type) {\n        case 'array':\n            visited.push(value);\n\n            append = formatArray(value, blockIndent, indentTemplate, visited, formatValue, valueIndex, path);\n            break;\n\n        case 'boolean':\n            append = value ? 'true' : 'false';\n            break;\n\n        case 'number':\n            append = String(value);\n            break;\n\n        case 'object':\n            visited.push(value);\n\n            append = formatObject(value, blockIndent, indentTemplate, visited, formatValue, valueIndex, path);\n            break;\n\n        case 'string':\n            append = JSON.stringify(value);\n            break;\n\n        case 'function':\n            append = getFunctionSignature(value);\n            break;\n\n        case 'undefined':\n            append = 'undefined';\n            break;\n\n        case 'null':\n            append = 'null';\n            break;\n\n        case 'nan':\n            append = 'NaN';\n            break;\n\n        default:\n            throw new Error('Unknown value type.');\n            break;\n    }\n\n    if (valueIndex) {\n        switch (type) {\n            case 'array':\n            case 'object':\n                valueIndex.add({\n                    path,\n                    type,\n                    value\n                });\n                break;\n\n            case 'boolean':\n            case 'number':\n            case 'string':\n            case 'function':\n            case 'undefined':\n            case 'null':\n            case 'nan':\n                valueIndex.increment()\n                valueIndex.add({\n                    path,\n                    type,\n                    value\n                });\n                break;\n        }\n    }\n\n    return append;\n};\n\nexport default formatValue;\n"],"sourceRoot":"/source/"}