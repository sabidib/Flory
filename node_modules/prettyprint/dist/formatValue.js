'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _indexOf = require('lodash/array/indexOf');

var _indexOf2 = _interopRequireDefault(_indexOf);

var _register = require('/Users/gajus/Documents/dev/gajus/pragmatist/node_modules/source-map-support/register.js');

var _formatArray = require('./formatArray');

var _formatArray2 = _interopRequireDefault(_formatArray);

var _formatObject = require('./formatObject');

var _formatObject2 = _interopRequireDefault(_formatObject);

var _getFunctionSignature = require('./getFunctionSignature');

var _getFunctionSignature2 = _interopRequireDefault(_getFunctionSignature);

var _getValueType = require('./getValueType');

var _getValueType2 = _interopRequireDefault(_getValueType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let formatValue;

formatValue = function (value) {
    let blockIndent = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    let indentTemplate = arguments.length <= 2 || arguments[2] === undefined ? '    ' : arguments[2];
    let visited = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];
    let valueIndex = arguments[4];
    let path = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];

    let append, type;

    type = (0, _getValueType2.default)(value);

    if ((0, _indexOf2.default)(visited, value) !== -1) {
        throw new Error('Circular references are not supported.');
    }

    switch (type) {
        case 'array':
            visited.push(value);

            append = (0, _formatArray2.default)(value, blockIndent, indentTemplate, visited, formatValue, valueIndex, path);
            break;

        case 'boolean':
            append = value ? 'true' : 'false';
            break;

        case 'number':
            append = String(value);
            break;

        case 'object':
            visited.push(value);

            append = (0, _formatObject2.default)(value, blockIndent, indentTemplate, visited, formatValue, valueIndex, path);
            break;

        case 'string':
            append = JSON.stringify(value);
            break;

        case 'function':
            append = (0, _getFunctionSignature2.default)(value);
            break;

        case 'undefined':
            append = 'undefined';
            break;

        case 'null':
            append = 'null';
            break;

        case 'nan':
            append = 'NaN';
            break;

        default:
            throw new Error('Unknown value type.');
            break;
    }

    if (valueIndex) {
        switch (type) {
            case 'array':
            case 'object':
                valueIndex.add({
                    path,
                    type,
                    value
                });
                break;

            case 'boolean':
            case 'number':
            case 'string':
            case 'function':
            case 'undefined':
            case 'null':
            case 'nan':
                valueIndex.increment();
                valueIndex.add({
                    path,
                    type,
                    value
                });
                break;
        }
    }

    return append;
};

exports.default = formatValue;
//# sourceMappingURL=formatValue.js.map
